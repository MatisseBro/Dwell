generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  nom       String    @default("Inconnu")
  prenom    String    @default("Inconnu")
  telephone String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  role      Role      @default(LOCATAIRE)

  accounts           Account[]
  sessions           Session[]
  annonces           Annonce[]
  likes              Like[]
  messagesSent       Message[] @relation("SentMessages")
  messagesReceived   Message[] @relation("ReceivedMessages")
}

model Annonce {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  ville       String
  price       Float
  type        String
  rooms       Int
  surface     Int
  images      Json     @default("[]")
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  likedBy     Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  annonce   Annonce  @relation(fields: [annonceId], references: [id], onDelete: Cascade)
  annonceId Int
  createdAt DateTime @default(now())

  @@unique([userId, annonceId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  createdAt  DateTime @default(now())

  senderId   Int
  receiverId Int

  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  LOCATAIRE
  PROPRIETAIRE
}
